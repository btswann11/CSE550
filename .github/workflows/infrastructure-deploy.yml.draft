name: 'Deploy Universal Translator Infrastructure'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/infrastructure-deploy.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/infrastructure-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Determine Environment
        id: determine-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_CONTAINER_NAME }}" \
            -backend-config="key=${{ steps.determine-env.outputs.environment }}/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_RESOURCE_GROUP }}"

      - name: Terraform Format Check
        working-directory: infrastructure/terraform
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: infrastructure/terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: infrastructure/terraform
        run: |
          terraform plan \
            -var-file="terraform.tfvars.${{ steps.determine-env.outputs.environment }}" \
            -out=tfplan \
            -detailed-exitcode

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ steps.determine-env.outputs.environment }}
          path: infrastructure/terraform/tfplan
          retention-days: 5

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    needs: [terraform-plan]
    environment: 
      name: ${{ steps.determine-env.outputs.environment }}
      url: ${{ steps.terraform-output.outputs.function_app_url }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Determine Environment
        id: determine-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ steps.determine-env.outputs.environment }}
          path: infrastructure/terraform/

      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_CONTAINER_NAME }}" \
            -backend-config="key=${{ steps.determine-env.outputs.environment }}/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_RESOURCE_GROUP }}"

      - name: Terraform Apply
        working-directory: infrastructure/terraform
        run: terraform apply -auto-approve tfplan

      - name: Terraform Output
        id: terraform-output
        working-directory: infrastructure/terraform
        run: |
          echo "function_app_url=$(terraform output -raw function_app_url)" >> $GITHUB_OUTPUT
          echo "function_app_name=$(terraform output -raw function_app_name)" >> $GITHUB_OUTPUT
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          
      - name: Create Deployment Summary
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ steps.determine-env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group:** ${{ steps.terraform-output.outputs.resource_group_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Function App URL:** ${{ steps.terraform-output.outputs.function_app_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”— Azure Portal Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Resource Group](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ steps.terraform-output.outputs.resource_group_name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Function App](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ steps.terraform-output.outputs.resource_group_name }}/providers/Microsoft.Web/sites/${{ steps.terraform-output.outputs.function_app_name }})" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: 
      name: ${{ steps.determine-env.outputs.environment }}-destroy
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Determine Environment
        id: determine-env
        run: |
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT

      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_CONTAINER_NAME }}" \
            -backend-config="key=${{ steps.determine-env.outputs.environment }}/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_RESOURCE_GROUP }}"

      - name: Terraform Destroy
        working-directory: infrastructure/terraform
        run: |
          terraform destroy \
            -var-file="terraform.tfvars.${{ steps.determine-env.outputs.environment }}" \
            -auto-approve
